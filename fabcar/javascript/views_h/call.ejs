<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Video Call</title>
        <link rel="stylesheet" href="./css/call.css">
    
        <script src='socket.io.min.js'></script>
        <style>
            body {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                padding-top: 24px;
                min-height: 90vh;
            }
        </style>
    </head>
    <body>
        <div>
            <div>
    
                <!-- to make a call with name -->
                <div id="call">
                    <div class="dialWrapper">
                        <input placeholder="Whom to call?" style="text-align:center; height: 50px; font-size: xx-large;"
                            type="text" name="callName" id="callName">
                        <div class="dialNumpadHWrapper">
                            <div class="dialNumber">
                            </div>
                            <div class="dialNumber">
                                <button class="dialActionButton" onclick="call()">Call</button>
                            </div>
                            <div class="dialNumber">
                            </div>
                        </div>
    
                    </div>
                </div>
    
                <!-- to show incommming call and accept -->
                <div id="answer">
                    <div class="incomingWrapper">
                        <div class="itemWrapper">
                            <h2>Incomming Call</h2>
                        </div>
                        <div class="itemWrapper">
                            <img id="profileImageA" style="padding: 30px; width: 140px; height: 140px;"
                                src="./img/profile.png" alt="">
                        </div>
                        <div class="itemWrapper">
                            <h2 style="line-height: 0px;"><span id="callerName"></span></h2>
                        </div>
                        <div class="itemWrapper" style="display: flex; flex-direction: row; margin-bottom: 20px;">
                            <button class="actionButton" onclick="answer()">Answer</button>
                        </div>
                    </div>
                </div>
    
                <!-- to show outgoing call -->
                <div id="calling">
                    <div class="incomingWrapper">
                        <div class="itemWrapper">
                            <h2>Calling</h2>
                        </div>
                        <div class="itemWrapper">
                            <img id="profileImageCA" style="padding: 30px; width: 140px; height: 140px;"
                                src="./img/profile.png" alt="">
                        </div>
                        <div class="itemWrapper">
                            <h3 style="line-height: 0px;"><span id="otherUserNameCA"></span></h3>
                        </div>
                    </div>
                </div>
    
                <!-- to show call in progress call -->
                <div id="inCall">
                    <div class="incomingWrapper">
                        <div class="itemWrapper">
                            <h3>On Call With</h3>
                            <h2 style="line-height: 0px;"><span id="otherUserNameC"></span></h2>
                        </div>
                    </div>
                </div>
    
                <br>
    
                <!-- to show local and remote video -->
                <div id="videos">
                    <div style="position:absolute; top:0; right:0; padding-right: 20px; padding-top: 20px">
                        <video width="100px" id="localVideo" autoplay muted playsinline></video>
                    </div>
                    <div id="remoteVideoDiv">
                        <video style="width: 500px;" id="remoteVideo" autoplay playsinline></video>
                    </div>
                </div>
                <div style="flex-grow: 1;">
                </div>
            </div>
    
    
    
    </body>
</html>
<script type="text/javascript" src="./jquery-3.6.0.js"></script>
<script type="text/javascript" src="./socket.io.min.js"></script>
<script>
    var partnerID = '<%-partnerID%>'; 
    var incoming ='<%-call%>';console.log(partnerID, incoming);
    var rtcData = window.opener.incom_call_data; console.log(rtcData);
    //-------------Call------------------//
    let otherUser;
    let remoteRTCMessage;
    if(rtcData)
    {
        remoteRTCMessage=rtcData.rtcMessage;
    }

    let iceCandidatesFromCaller = [];
    let peerConnection;
    let remoteStream;
    let localStream;
    let localVideo = document.querySelector('#localVideo');
    let remoteVideo = document.querySelector('#remoteVideo');
    let callInProgress = false;
    

    var myID_json = sessionStorage.getItem('login_data');
    document.getElementById("call").style.display = "none";
    document.getElementById("answer").style.display = "none";
    document.getElementById("inCall").style.display = "none";
    document.getElementById("calling").style.display = "none";
    document.getElementById("videos").style.display = "none";

    
    if(myID_json==null){
        if(window.confirm('ban khong co quyen truy cap!!!')){
            window.location.href='/';
        }
        else
        {
            window.location.href='/';
        }
    }
    else
    {
      var myID = JSON.parse(myID_json)['id'];
        var accessToken = JSON.parse(myID_json).accessToken;
        var refreshToken = JSON.parse(myID_json).refreshToken;
    }
    var socket=io({auth:{'token': accessToken}});
    socket.emit('call_connect',{'userID':myID});
    
    window.onload = async function(){
        const options = {
            method: 'GET',
            headers: {
                'authorization': 'token '+ accessToken
            }
        };
        var res= await fetch('/authenOnLoad', options);
        var res_json = await res.json();
        if(!res || res.status!=200)
        {
            if(window.confirm('ban khong co quyen truy cap!!!')){
                window.location.href='/';
            }
            else
            {
                window.location.href='/';
            }
        }
        else
        {
            if(incoming=='caller'){
                call(partnerID);
            }
            else if(incoming=='callee')
            {
                answer(partnerID);
            }
            
        }
        
    }
    let sdpConstraints = {
        offerToReceiveAudio: true,
        offerToReceiveVideo: true
    };


    
    function connectSocket() {
        socket.on('newCall', data => {
            //when other called you
            console.log(data);
            //show answer button

            otherUser = data.caller;
            remoteRTCMessage = data.rtcMessage

            // document.getElementById("profileImageA").src = baseURL + callerProfile.image;
            document.getElementById("callerName").innerHTML = otherUser;
            document.getElementById("call").style.display = "none";
            document.getElementById("answer").style.display = "block";
        })

        socket.on('callAnswered', data => {
            console.log('rtc', data);
            //when other accept our call
            remoteRTCMessage = data.rtcMessage
            peerConnection.setRemoteDescription(new RTCSessionDescription(remoteRTCMessage));

            document.getElementById("calling").style.display = "none";

            console.log("Call Started. They Answered");
            // console.log(pc);

            callProgress()
        })

        socket.on('ICEcandidate', data => {
            // console.log(data);
            console.log("GOT ICE candidate");

            let message = data.rtcMessage

            let candidate = new RTCIceCandidate({
                sdpMLineIndex: message.label,
                candidate: message.candidate
            });

            if (peerConnection) {
                console.log("ICE candidate Added");
                peerConnection.addIceCandidate(candidate);
            } else {
                console.log("ICE candidate Pushed");
                iceCandidatesFromCaller.push(candidate);
            }

        })

    }
    connectSocket();

    function call(userToCall)
    {
        otherUser = userToCall;

        beReady()
            .then(bool => {
                processCall(userToCall)
            })
    }
    //event from html
    function answer(partnerID) {
        //do the event firing

        beReady()
            .then(bool => {
                processAccept(partnerID);
            })

        document.getElementById("answer").style.display = "none";
    }
    function createPeerConnection() {
        try {
            peerConnection = new RTCPeerConnection();
            // peerConnection = new RTCPeerConnection();
            peerConnection.onicecandidate = handleIceCandidate;
            peerConnection.onaddstream = handleRemoteStreamAdded;
            peerConnection.onremovestream = handleRemoteStreamRemoved;
            console.log('Created RTCPeerConnnection');
            return;
        } catch (e) {
            console.log('Failed to create PeerConnection, exception: ' + e.message);
            alert('Cannot create RTCPeerConnection object.');
            return;
        }
    }
    function createConnectionAndAddStream() {
        createPeerConnection();
        peerConnection.addStream(localStream);
        return true;
    }

    function beReady() {
        return navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        })
            .then(stream => {
                localStream = stream;
                localVideo.srcObject = stream;

                return createConnectionAndAddStream()
            })
            .catch(function (e) {
                alert('getUserMedia() error: ' + e.name);
            });
    }

    function sendCall(data) {
        //to send a call
        console.log("Send Call");
        socket.emit("call", data);

        /*document.getElementById("call").style.display = "none";
        // document.getElementById("profileImageCA").src = baseURL + otherUserProfile.image;
        document.getElementById("otherUserNameCA").innerHTML = otherUser;*/
        document.getElementById("calling").style.display = "block";
    }
    function processCall(userID) {
        peerConnection.createOffer((sessionDescription) => {
            peerConnection.setLocalDescription(sessionDescription);
            sendCall({
                caller: JSON.parse(sessionStorage.getItem('login_data')).my_username,
                callerID: myID,
                calleeID: parseInt(userID),
                rtcMessage: sessionDescription
            })
        }, (error) => {
            console.log("Error");
        });
    }
    function answerCall(data) {
        //to answer a call
        socket.emit("answerCall", data);
        callProgress();
    }

    function processAccept(partnerID) {

        peerConnection.setRemoteDescription(new RTCSessionDescription(remoteRTCMessage));
        peerConnection.createAnswer((sessionDescription) => {
            peerConnection.setLocalDescription(sessionDescription);

            if (iceCandidatesFromCaller.length > 0) {
                //I am having issues with call not being processed in real world (internet, not local)
                //so I will push iceCandidates I received after the call arrived, push it and, once we accept
                //add it as ice candidate
                //if the offer rtc message contains all thes ICE candidates we can ingore this.
                for (let i = 0; i < iceCandidatesFromCaller.length; i++) {
                    //
                    let candidate = iceCandidatesFromCaller[i];
                    console.log("ICE candidate Added From queue");
                    try {
                        peerConnection.addIceCandidate(candidate).then(done => {
                            console.log(done);
                        }).catch(error => {
                            console.log(error);
                        })
                    } catch (error) {
                        console.log(error);
                    }
                }
                iceCandidatesFromCaller = [];
                console.log("ICE candidate queue cleared");
            } else {
                console.log("NO Ice candidate in queue");
            }

            answerCall({
                callerID: partnerID,
                rtcMessage: sessionDescription,
                caller: 'CALLER'
            })

        }, (error) => {
            console.log("Error");
        })
    }
    function sendICEcandidate(data) {
        //send only if we have caller, else no need to
        console.log("Send ICE candidate");
        socket.emit("ICEcandidate", data)
    }
    function handleIceCandidate(event) {
    // console.log('icecandidate event: ', event);
        if (event.candidate) {
            console.log("Local ICE candidate");
            // console.log(event.candidate.candidate);

            sendICEcandidate({
                user: partnerID,
                sender: myID,
                rtcMessage: {
                    label: event.candidate.sdpMLineIndex,
                    id: event.candidate.sdpMid,
                    candidate: event.candidate.candidate
                }
            })

        } else {
            console.log('End of candidates.');
        }
    }

    function handleRemoteStreamAdded(event) {
        console.log('Remote stream added.', event.stream);
        remoteStream = event.stream;
        remoteVideo.srcObject = remoteStream;
    }

    function handleRemoteStreamRemoved(event) {
        console.log('Remote stream removed. Event: ', event);
        remoteVideo.srcObject = null;
        localVideo.srcObject = null;
    }

    function callProgress() {

        document.getElementById("videos").style.display = "block";
        //document.getElementById("otherUserNameC").innerHTML = partnerID;
        //document.getElementById("inCall").style.display = "block";

        callInProgress = true;
    }
    function stop() {
        localStream.getTracks().forEach(track => track.stop());
        callInProgress = false;
        peerConnection.close();
        peerConnection = null;
        /*document.getElementById("call").style.display = "block";
        document.getElementById("answer").style.display = "none";
        document.getElementById("inCall").style.display = "none";
        document.getElementById("calling").style.display = "none";
        document.getElementById("endVideoButton").style.display = "none"*/
        otherUser = null;
    }
    //--------------End Call-------------//
</script>