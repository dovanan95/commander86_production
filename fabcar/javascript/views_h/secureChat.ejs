<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="./fontawesome-free-6.1.1-web/css/all.min.css">
<style>
    * {
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
        font-family: "Lato", sans-serif;
    }

    .chat-container {
        display: flex;
        margin-left: 80px;
        transition: all 0.4s ease;
        height: 100vh;
    }

    .chat-container.scaledown {
        margin-left: 380px;
    }

    /* Style the tab */
    .tab {
        display: flex;
        flex-direction: column;
        width: 25%;
        /* min-height: 100vh; */
        background-color: #f8f8f8;
        border-right: none;
        height: 100%;

    }

    #hist_tab {
        height: 100%;
        overflow-y: auto;
        background-color: #f8f8f8;
        padding-left: 20px;
    }

    .tablinks {
        display: flex;
        /* justify-content: space-between; */
        align-items: center;
        padding: 20px 18px 20px 22px;
        font-family: 'Poppins', sans-serif;
        background-color: transparent;
        transition: all 0.1s ease-in-out;
        margin: 0;
        border: 0px rgb(121, 199, 197);
        position: relative;
        z-index: 999;
        margin-bottom: 10px;
    }

    .tablinks:hover {
        cursor: pointer;
        background-color: #ffffff;
        border-right: 4px solid #635f84;
        box-shadow: -4px 10px 15px 0px #eee;
    }

    .tablinks.active-users {
        background-color: #ffffff;
        border-right: 4px solid #635f84;
        box-shadow: -4px 10px 15px 0px #eee;
    }

    .tablinks .acc-avatar {
        width: 20%;
    }

    .tablinks .acc-status {
        width: 90%;
    }

    .tablinks .acc {
        /* text-transform: uppercase; */
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 15px;
        letter-spacing: 0.5px;
        margin-bottom: 5px;
    }

    .tablinks .status-offline {
        color: red;
    }

    .tablinks .status-info {
        display: flex;
        align-items: center;
    }

    .tablinks .status-online {
        color: red;
    }

    .dots-offline {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: red;
        margin-right: 15px;
    }

    .dots-online {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: green;
        margin-right: 15px;
    }

    /* Style the tab content */
    .chat-box {
        display: flex;
        width: 75%;
        flex-direction: column;
        font-family: 'Poppins', sans-serif;
        height: 100%;
        background-color: #f1f3f4;
    }

    .chat-box .top-bar {
        width: auto;
        height: 8%;
        background: #fff;
        display: flex;
        justify-content: space-between;
        padding: 20px 30px;
        border: none;
        margin: 20px 15px;
        align-items: center;
        box-sizing: border-box;
        border-radius: 8px;
        box-shadow: -4px 10px 15px 0px #eee;
    }

    .chat-box .top-bar .user-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .chat-box .top-bar .user-info .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #5364ee;
        position: relative;
    }

    .chat-box .top-bar .user-info .avatar p {
        width: 40px;
        height: 40px;
        line-height: 40px;
        position: absolute;
        /* left: 50%; */
        text-align: center;
        color: white;
        font-weight: 400;
    }

    .chat-box .top-bar .user-info .name-chat {
        letter-spacing: 1px;
        font-weight: 500;
        font-size: 20px;
    }


    .chat-box .top-bar button {
        outline: none;
        border: none;
    }

    .chat-box .top-bar i.bxs-phone-call {
        color: #5364ee;
        font-size: 26px;
        background-color: #fff;
        cursor: pointer;
    }

    #chat-content {
        min-width: 100%;
        height: 85%;
        display: flex;
        flex-direction: column;
        overflow-y: scroll;
        background-color: #f1f3f4;
        padding: 20px;
    }

    .incoming {
        display: flex;
        align-items: center;
        margin-bottom: 4px;
        width: 100%;
    }

    .incoming .bubble {
        padding: 15px 15px 15px 18px;
        background: #fdfdfd;
        border-radius: 0px 12px 12px 12px;
        color: 'black';
        font-size: 18px;
        margin-right: 5px;
        word-break: break-all;
        max-width: 75%;
        margin-bottom: 10px;
    }

    .outgoing {
        display: flex;
        flex-direction: row-reverse;
        align-items: center;
        margin-bottom: 4px;
        width: 100%;
    }

    .outgoing .bubble {
        padding: 15px 15px 15px 18px;
        background: #3b3ea2;
        border-radius: 12px 0px 12px 12px;
        color: white;
        font-size: 18px;
        margin-left: 5px;
        word-break: break-all;
        max-width: 75%;
        margin-bottom: 10px;
    }

    .userName {
        font-size: 16px;
        margin-bottom: 5px;
        font-weight: 600;
    }

    .block_func_btn {
        position: relative;
        display: inline-block;
    }

    .expand-func-icon {
        display: flex;
        flex-direction: column;
        gap: 2px;
        cursor: pointer;
        width: 22px;
        height: 22px;
        border-radius: 50%;
        justify-content: center;
        align-items: center;
    }


    .expand-func-icon:hover {
        background-color: #C7C9CC;
    }

    .expand-func-icon .dots {
        width: 3px;
        height: 3px;
        border-radius: 50%;
        background: #777777;
    }

    .expand-func-icon_left {
        display: flex;
        cursor: pointer;
        padding: 7px;
        border-radius: 50%;
        justify-content: center;
        align-items: center;
    }

    .expand-func-icon_left:hover {
        background-color: #C7C9CC;
    }

    .expand-func-icon_left .fa-list-check {
        font-size: 15px;
    }

    .incoming .block_func_btn .dropdown-button {
        min-width: 110px;
        min-height: 60px;
        position: absolute;
        left: 20%;
        top: 25px;
        padding: 8px 11px;
        background-color: #C7C9CC;
        border-radius: 0px 8px 10px 8px;
        display: none;
    }

    .incoming.active-dropdown .block_func_btn .dropdown-button {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 5px;
        z-index: 99;
    }

    .block_func_btn .dropdown-button button {
        outline: none;
        border: none;
        background: transparent;
        font-family: 'Poppins', sans-serif;
        font-size: 12px;
        width: 100%;
        font-weight: 400;
    }

    .block_func_btn .dropdown-button button:hover {
        cursor: pointer;
        background-color: #f2f2f2;
        padding: 5px 8px;
        border-radius: 4px;
    }

    .outgoing .block_func_btn .dropdown-button {
        min-width: 110px;
        min-height: 60px;
        position: absolute;
        /*neu muon dung hover thi phair an cai nay di*/
        right: 20%;
        top: 25px;
        padding: 8px 11px;
        background-color: #C7C9CC;
        border-radius: 10px 0px 10px 10px;
        display: none;
    }

    .outgoing.active-dropdown .block_func_btn .dropdown-button {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 5px;
        z-index: 99;
    }


    /* .input_form{
    position: absolute;
    position: sticky;
    bottom: 50;
    top: 430px;
} */

    /* .input_mess{
    float: right;
    width: 50%;
    height: 50px;
    margin-top: auto;
} */
    /* .send_button{
    margin-top: auto;
    float: right;
    height: 50px;
} */

    .darker {
        border-color: #ccc;
        background-color: #ddd;
    }


    .msger-inputarea {
        margin: 15px 10px;
        display: flex;
        padding: 10px;
        background: #fff;
        border-radius: 6px;
    }

    .msger-input {
        border: none;
        outline: none;
        margin: 0px 10px 0px 10px;
        width: 100%;
        background: #fff;
        display: block;
        /* padding-top: 10px; */
        font-size: 20px;
        font-family: 'Poppins', sans-serif;
        padding-left: 30px;
    }

    .msger-send-btn {
        border: none;
        outline: none;
        margin-left: 10px;
        background: #5759e8;
        color: #fff;
        cursor: pointer;
        border-radius: 10%;
    }

    .msger-send-btn i {
        padding: 10px 12px;
        font-size: 28px;
        cursor: pointer;
    }

    .netstat {
        color: green;
    }

    .button_menu {
        background-color: #4CAF50;
        /* Green */
        border: none;
        color: white;
        padding: 16px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .show {
        display: block;
    }

    /* The Modal (background) */
    .modal {
        display: none;
        /* Hidden by default */
        position: fixed;
        /* Stay in place */
        z-index: 1000;
        /* Sit on top */
        padding-top: 100px;
        /* Location of the box */
        left: 0;
        top: 0;
        width: 100%;
        /* Full width */
        height: 100%;
        /* Full height */
        overflow: auto;
        /* Enable scroll if needed */
        background-color: rgb(0, 0, 0);
        /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4);
        /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        width: 80%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
    }

    /* Add Animation */
    @-webkit-keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    @keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    /* The Close Button */
    .close {
        color: white;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    .modal-header {
        padding: 2px 16px;
        background-color: #5cb85c;
        color: white;
    }

    .modal-body {
        padding: 2px 16px;
    }

    .modal-footer {
        padding: 2px 16px;
        background-color: #5cb85c;
        color: white;
    }

    .loader {
    border: 16px solid #f3f3f3;
    border-radius: 50%;
    border-top: 16px solid blue;
    border-bottom: 16px solid blue;
    width: 120px;
    height: 120px;
    -webkit-animation: spin 2s linear infinite;
    animation: spin 2s linear infinite;
    display: none;
    }

    @-webkit-keyframes spin {
    0% { -webkit-transform: rotate(0deg); }
    100% { -webkit-transform: rotate(360deg); }
    }

    @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
    }
</style>
<html>
    <head>
        <title>He Thong Tin Chi Dao Dieu Hanh</title>
        <%- include('./header')%>
    </head>
    <body onload="checkLogin()">
        <div class="chat-container">
            <div class="tab">
                <div id='hist_tab'>
                    <!--button class="tablinks" >Chat History</button-->
                </div>
            </div>

            <div class="chat-box">
                <div class="top-bar">
                    <div class="user-info">
                        <div class="avatar">
                            <p>H</p>
                        </div>
                        <div class="name-chat"></div>
                    </div>
                    <div class="loader"></div>
                    <!--<button onclick="call()"><i class="fa-solid fa-phone bxs-phone-call"></i></button>-->
                </div>
                <div id="chat-content">
                    <!-- contentchat -->
                </div>
                <div class="msger-inputarea">
                    <input id='inputMess' class="msger-input" placeholder="Type a message..." />
                    <div class="msger-send-btn">
                        <label for="myFile">
                            <i class="fa-solid fa-paperclip"></i>
                        </label>
                        <input onchange="sendFile()" type="file" style="display: none;" id="myFile" name="filename">
                    </div>

                    <button onclick="sendMess()" id="button_send_mess" class="msger-send-btn">
                        <i class="fa-solid fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <div id="infoModal" class="modal">

            <!-- Modal content -->
            <div class="modal-content">
              <div class="modal-header">
                <span class="close" id="closeInfoModal">&times;</span>
                <h2> MESSAGE INFOMATION</h2>
              </div>
              <div class="modal-body" id="info-body">
              </div>
              <div class="modal-footer">
                <h3>HTTCDDH 2022</h3>
              </div>
            </div>
          
          </div>
    </body>
</html>
<script type="text/javascript" src="./jquery-3.6.0.js"></script>
<script type="text/javascript" src="./socket.io.min.js"></script>
<script>
    const left_tab = document.getElementById('hist_tab');
    var message_zone = document.getElementById('chat-content');
    const messContent = document.getElementById('inputMess');
    // const messContainer = document.getElementById('mess_container');
    var tab_partner_prefix = 'partner_list.';

    socket.on('secure_incoming_mess', function(data){
        console.log(data);
        //console.log(document.getElementsByClassName('tablinks').length);

        var current_partner = sessionStorage.getItem('current_partner_id');
        var tablinks = document.getElementsByClassName('tablinks');
        if(data.docType=='secure_private_message')
        {
            if(data.sender == current_partner)
            {
                if(data.isFile && data.isFile=='true')
                {
                    let my_block_message = decryptMyMessage(data.message);
                        let my_block_filename = decryptMyMessage(data.originalFilename);
                        var message = messageFile(my_block_message, my_block_filename);
                }
                else
                {
                    let my_block_message = decryptMyMessage(data.message);
                        var message = my_block_message;
                }
                var mess_block_t = prtnerMessage(data.messID, data.sender_name, message, 'false', data.docType);
                message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                message_zone.scrollTop = message_zone.scrollHeight;
                reloadLeftTab(tab_partner_prefix+ data.sender);
                //socket.emit('seenUpdate', {'messID': data.messID, 'docType': 'private_message', 'userID': myID, 'timestamp': Date.now()})
            }
            else if(data.sender != current_partner)
            {   
                var flag =0;
                for(var k=0;k<tablinks.length;k++)
                {
                    console.log(tablinks[k]);
                    var id = tablinks[k].getAttribute('id_sender');
                    console.log(id);
                    if(data.sender==id)
                    {
                        flag=1;
                    }
                }
                if(flag==0)
                {
                    if(myID!=data.sender){
                        var tab_partner_el = private_message_left_user(data.docType, data.sender, data.sender_name)
                        left_tab.insertAdjacentHTML("afterbegin", tab_partner_el);
                    }
                    else if(myID==data.sender && current_partner==data.receiver){
                        if(data.isFile && data.isFile=='true'){
                            let my_block_message = decryptMyMessage(data.message);
                            let my_block_filename = decryptMyMessage(data.originalFilename);
                            var message = messageFile(my_block_message, my_block_filename);
                        }
                        else{
                            let my_block_message = decryptMyMessage(data.message);
                            var message = my_block_message;
                        }
                        var mess_block_t = myMessage(data.messID, my_name, message, data.isImportant, data.docType);
                        message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                        message_zone.scrollTop = message_zone.scrollHeight;
                        reloadLeftTab(tab_partner_prefix+ data.receiver);
                    }
                }
                else if(flag==1)
                {
                    if(myID!=data.sender)
                    {
                        var partner_tab = document.getElementById(tab_partner_prefix+data.sender);
                        console.log(partner_tab);
                        //partner_tab.querySelector('.dots-offline').style.backgroundColor='orange';
                        reloadLeftTab(tab_partner_prefix+ data.sender);
                    }
                }
                
            }
            
        }
    })

    function private_message_left_user(docType, id, name)
    {
        var left_private_block =
        `
        <div class="tablinks" docType=${docType} id="${tab_partner_prefix + id}"
                    onclick=choosePartner_2(this) id_sender="${id}">
                <div class="acc-avatar"></div>
                <div class="acc-status"  >
                    <div class="acc">${name}</div>
                </div>
                <div class="block_func_btn"  onclick=leftTabOption(this)>
                    <div class="expand-func-icon_left">
                        <i class="fa-solid fa-lock"></i>
                        <i class="fa-solid fa-list-check"></i>   
                    </div>
                    <div class="dropdown-button" style="display:none;">
                        <button onclick="console.log(this)" > SECURED CHAT</button>
                        <button onclick="console.log(this)" > CHAT SETTINGS</button>
                    </div>
                </div>
                
            </div>
            <hr class="solid">
        `
        return left_private_block
    }
    function myMessage(id_block, my_name, content, isImportant, docType)
    {
        var mess_block = `
                            <div class="outgoing messBlock" id=${id_block} docType=${docType}>
                                <div class="bubble">
                                    <div class="userName" style="font-size: 10px; font-style:italic; ">${my_name}</div>
                                    <div class="mess-content">${content}</div>
                                </div>
                                <div class="block_func_btn">
                                    <div class="expand-func-icon">
                                        <div class="dots"></div>
                                        <div class="dots"></div>
                                        <div class="dots"></div>    
                                    </div>
                                    <div class="dropdown-button">
                                        <button onclick="markImportantMess(this)" >IMPORTANT</button>
                                        <button onclick="viewDetailBlock(this)" > VIEW DETAIL</button>
                                    </div>
                                </div>
                            </div>`
        if(isImportant=='true')
        {
            var text_before = `class="bubble"`;
            var postitionAdd = mess_block.search(text_before)+ text_before.length;
            mess_block = [mess_block.slice(0, postitionAdd), ` style="background-color:red"`, mess_block.slice(postitionAdd) ].join('');
            mess_block = mess_block.replace(`<button onclick="markImportantMess(this)" >IMPORTANT</button>`, 
                        `<button onclick="verifyMessBlock(this)" >VERIFY</button>`);

        }
        return mess_block;
    }
    function prtnerMessage(id_block, sender_name, content, isImportant, docType)
    {
        var mess_block = `
                            <div class="incoming messBlock" id=${id_block} docType=${docType}>
                                <div class="bubble">
                                    <div class="userName" style="font-size: 10px; font-style:italic; ">${sender_name}</div>
                                    <div class="mess-content">${content}</div>
                                </div>
                                <div class="block_func_btn" style="float:right;">
                                    <div class="expand-func-icon">
                                        <div class="dots"></div>
                                        <div class="dots"></div>
                                        <div class="dots"></div>    
                                    </div>
                                    <div class="dropdown-button">
                                        <button onclick="markImportantMess(this)" >IMPORTANT</button>
                                        <button onclick="viewDetailBlock(this)" > VIEW DETAIL</button>
                                    </div>
                                </div>
                            </div>`
        if(isImportant=='true')
        {
            var text_before = `class="bubble"`;
            var postitionAdd = mess_block.search(text_before)+ text_before.length;
            mess_block = [mess_block.slice(0, postitionAdd), ` style="background-color:red"`, mess_block.slice(postitionAdd) ].join('');
            mess_block = mess_block.replace(`<button onclick="markImportantMess(this)" >IMPORTANT</button>`, 
                        `<button onclick="verifyMessBlock(this)" >VERIFY</button>`);
        }
        return mess_block
    }
    function messageFile(fileID, fileName) { 
        var message=
        `
            <i class="fa-solid fa-file-lines"></i>
            <div class="fileName">${fileName}</div>
            <button onclick="downloadFile('${fileID}')" fileID="${fileID}">DOWNLOAD</button>
        `
        return message;
    };
    function reloadLeftTab(id){
        
        var childLeftButton = left_tab.children;
        var index; var tab;
        for(let i=0; i<childLeftButton.length; i++)
        {
            var childItem = childLeftButton[i];
            if(childItem.id==id)
            {
                index = i;
                tab=childItem.outerHTML+ `<hr class="solid">`;
            }
        }
        left_tab.removeChild(left_tab.children[index+1]);
        left_tab.removeChild(document.getElementById(id));
        left_tab.insertAdjacentHTML('afterbegin', tab);
    }
    function checkLogin(){ 
       var check = sessionStorage.getItem('login_data');
       sessionStorage.removeItem('current_partner_id');

       var check_json = JSON.parse(check);
       if(check_json ==null || check_json.isLogin != true)
       {
           window.location.href='/';
       }
       else
       {

            fetchData();
       }
    }
    var response_init;
    async function fetchData(){
        const options = {
            method: 'POST',
            body: JSON.stringify({'id': parseInt(myID), 'limit':30}),
            headers: {
                'authorization': 'token '+ accessToken,
                'Content-Type': 'application/json'
            }
        }
        var response_init_load = await fetch("/secureChat/secure_load_chat_history", options);
        response_init = await response_init_load.json(); 
        response_init = response_init.sort((a,b)=>b.timestamp-a.timestamp);
        var tab_partner_el;
        var room_chat=[];
        for(var i in response_init)
        {
            console.log(response_init[i]);
            if(response_init[i].docType=='secure_private_message')
            {
                tab_partner_el =  private_message_left_user(response_init[i].docType, response_init[i].userID, response_init[i].username);
            }
            
            left_tab.insertAdjacentHTML("beforeend", tab_partner_el);
        }
        //socket.emit('joinRoom',{'roomID':room_chat});
        //console.log(document.getElementsByClassName('tablinks').length);
    }
    async function getBlockByID(partner_id, docType){
        //code call API get to /chat_peer
        var block;
        if(docType=='secure_private_message')
        {
            //code
            var data = {'my_ID': myID, 'partner_ID': partner_id, 'limit': 100, 'skip': 0};
            const options = {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json',
                    'authorization': 'token '+ accessToken,
                }
            }
            var getPrivMessBlock = await fetch('/secureChat/secure_chat_peer', options);
            block = await getPrivMessBlock.json(); console.log(block.partner_publicKeyRSA)
            sessionStorage.setItem('partner_publicKeyRSA', 
                JSON.stringify(
                    [
                        {'partnerID':sessionStorage.getItem('current_partner_id'),
                        'partner_publicKeyRSA':block.partner_publicKeyRSA}
                    ]
                )
            );
        }
        return(block.chatBlocks);
    }
    async function choosePartner_2(obj){
        // debugger;

        message_zone.innerHTML=``;
        var id_partner = obj.getAttribute('id_sender');
        var docType = obj.getAttribute('docType');
        sessionStorage.setItem('current_partner_id', id_partner);
        var options;
        //callAPI(id)
        if(docType=='secure_private_message')
        {   
            id_partner=parseInt(id_partner);
            var block_ = await getBlockByID(id_partner, docType); //API call result
            var block =block_.reverse(); 
            var seen = [];
            for(let i=0;i<block.length;i++)
            {
                var mess_block;
                if(block[i].sender==id_partner)
                {
                    if(block[i].isFile && block[i].isFile=='true')
                    {
                        let my_block_message = decryptMyMessage(block[i].message);
                        let my_block_filename = decryptMyMessage(block[i].originalFilename);
                        var message = messageFile(my_block_message, my_block_filename);
                    }
                    else
                    {
                        let my_block_message = decryptMyMessage(block[i].message);
                        var message = my_block_message;
                    }
                    mess_block_t = prtnerMessage(block[i].messID, block[i].sender_name, message, block[i].isImportant, block[i].docType);
                    if(block[i].seen && block[i].seen.length==0)
                    {
                        seen.push(block[i].messID);
                    }
                }
                else if(block[i].sender != id_partner)
                {
                    if(block[i].isFile && block[i].isFile=='true')
                    {
                        let my_block_message = decryptMyMessage(block[i].message);
                        let my_block_filename = decryptMyMessage(block[i].originalFilename);
                        var message = messageFile(my_block_message, my_block_filename);
                    }
                    else
                    {
                        let my_block_message = decryptMyMessage(block[i].message);
                        var message = my_block_message;
                    }
                    mess_block_t = myMessage(block[i].messID, my_name, message, block[i].isImportant, block[i].docType);
                }
                message_zone.insertAdjacentHTML("beforeend", mess_block_t);
     
            }

            options ={
                method: 'POST',
                body: JSON.stringify({'timestamp': Date.now(), 'seenMessID': seen, 'docType': 'private_message'}),
                headers:{
                    'Content-Type': 'application/json',
                    'authorization': 'token '+ accessToken,
                }
            }
        }

        message_zone.scrollTop = message_zone.scrollHeight;
        //var res = await fetch('/seenUpdate', options);
    }

    messContent.addEventListener('keyup', function(event){
        if(event.keyCode===13)
        {
            document.getElementById('button_send_mess').click();
        } 
    })

    function sendMess()
    {
        var current_partner = sessionStorage.getItem('current_partner_id');
        var partner_element = document.getElementById(tab_partner_prefix+ current_partner);
        var docType = partner_element.getAttribute('docType');
        var isImportant = 'false';
        if(current_partner != null && messContent.value!= '')
        {
            if(docType=='secure_private_message')
            {
                //message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                message_zone.scrollTop = message_zone.scrollHeight;
                let RSAkey = deserializeRSAKey(sessionStorage.getItem('privKeyRSA'));
                let my_publicKey = cryptico.publicKeyString(RSAkey)
                var partner_publicKey = JSON.parse(sessionStorage.getItem('partner_publicKeyRSA'))[0]['partner_publicKeyRSA'];
                SecurePrivMessageTextObj(messContent.value, 'secure_private_message', myID, current_partner, my_name,
                        my_publicKey, partner_publicKey, socket, 'secure_sendMess');
                messContent.value='';
                reloadLeftTab(tab_partner_prefix+ current_partner);
            }
        }    
    }

    $(document).on('click', '#menu-btn', function(){
        //debugger;
        if ($('.sidebar').hasClass('active')){
            $('.sidebar').removeClass('active');
            $('.chat-container').removeClass('scaledown');
        } else {
            $('.sidebar').addClass('active');
            $('.chat-container').addClass('scaledown');
        }
    })

    $(document).on('click', '.bx-search-alt-2' , function(){
        if (!$('.sidebar').hasClass('active')){
            $('.sidebar').addClass('active');
            $('.chat-container').addClass('scaledown');
        }
    })
    
    $(document).on('click', '.expand-func-icon', function(){
        console.log(this);
        // debugger;
        if ($(this).closest('.incoming, .outgoing').hasClass('active-dropdown')){
            $(this).closest('.incoming, .outgoing').removeClass('active-dropdown');
        } else {
            $('.incoming, .outgoing').removeClass('active-dropdown');
            $(this).closest('.outgoing, .incoming').addClass('active-dropdown');
        }
    })

    document.addEventListener('click', function(e){
        if(!e.target.matches('.expand-func-icon'))
        {
            var dropdowns = document.getElementsByClassName("active-dropdown");
            if(dropdowns.length>0)
            {
                dropdowns[0].classList.remove("active-dropdown");
            }
        }
    })

    $(document).on('click', '.tablinks', function () {
        $('#hist_tab').find('.tablinks').removeClass('active-users')
        $(this).each(function () {
            if ($(this).hasClass('active-users')) {
                $(this).removeClass('active-users');
            } else {
                $(this).addClass('active-users');
            }
        })
    })

</script>